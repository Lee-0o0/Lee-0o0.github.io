<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WinForm如何实现ComboBox模糊查询</title>
      <link href="/Winform%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ComboBox%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/"/>
      <url>/Winform%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ComboBox%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者：<a href="http://www.cnblogs.com/xilipu31/">枫上善若水</a><br>出处：<a href="http://www.cnblogs.com/xilipu31/">http://www.cnblogs.com/xilipu31/</a><br>本文版权归作者和博客园共有,欢迎转载,但未经作者同意必须保留此段声明,且在文章页面明显位置给出原文链接。</p></blockquote><p>前台设计：</p><p>　　前台就是一个简单的Form窗体+一个ComboBox控件。</p><p>思路整理：</p><ol><li><p>用一个<code>List&lt;string&gt; listOnit</code>存放初始化数据，用一个<code>List&lt;string&gt; listNew</code>存放输入key之后，返回的数据。</p></li><li><p>用上面的<code>listOnit</code>初始化ComboBox数据源进行绑定。</p></li><li><p>在TextUpdate方法内部，添加实现方法。</p><p>首先进入方法，先清除ComboBox的内容，然后将输入的内容去<code>listOnit</code>初始化的数据中比对，找出对应数据，然后放入<code>listNew</code>存放数据，最后将<code>listNew</code>数据重新赋值给ComboBox。</p></li></ol><p>源码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">TimerDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form2</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化绑定默认关键词（此数据源可以从数据库取）</span></span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; listOnit = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="comment">//输入key之后，返回的关键词</span></span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; listNew = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form2</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form2_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//调用绑定</span></span><br><span class="line">            BindComboBox();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 绑定ComboBox</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BindComboBox</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            listOnit.Add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            listOnit.Add(<span class="string">&quot;张思&quot;</span>);</span><br><span class="line">            listOnit.Add(<span class="string">&quot;张五&quot;</span>);</span><br><span class="line">            listOnit.Add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">            listOnit.Add(<span class="string">&quot;刘宇&quot;</span>);</span><br><span class="line">            listOnit.Add(<span class="string">&quot;马六&quot;</span>);</span><br><span class="line">            listOnit.Add(<span class="string">&quot;孙楠&quot;</span>);</span><br><span class="line">            listOnit.Add(<span class="string">&quot;那英&quot;</span>);</span><br><span class="line">            listOnit.Add(<span class="string">&quot;刘欢&quot;</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 1.注意用Item.Add(obj)或者Item.AddRange(obj)方式添加</span></span><br><span class="line"><span class="comment">             * 2.如果用DataSource绑定，后面再进行绑定是不行的，即便是Add或者Clear也不行</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">this</span>.comboBox1.Items.AddRange(listOnit.ToArray());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">comboBox1_TextChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              </span></span><br><span class="line"><span class="comment">             * 不能用TextChanged操作，当this.comboBox1.DroppedDown为True时，选择项上下键有冲突</span></span><br><span class="line"><span class="comment">              </span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">comboBox1_TextUpdate</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//清空combobox</span></span><br><span class="line">            <span class="keyword">this</span>.comboBox1.Items.Clear();</span><br><span class="line">            <span class="comment">//清空listNew</span></span><br><span class="line">            listNew.Clear();</span><br><span class="line">            <span class="comment">//遍历全部备查数据</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> listOnit)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (item.Contains(<span class="keyword">this</span>.comboBox1.Text))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//符合，插入ListNew</span></span><br><span class="line">                    listNew.Add(item);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//combobox添加已经查到的关键词</span></span><br><span class="line">            <span class="keyword">this</span>.comboBox1.Items.AddRange(listNew.ToArray());</span><br><span class="line">            <span class="comment">//设置光标位置，否则光标位置始终保持在第一列，造成输入关键词的倒序排列</span></span><br><span class="line">            <span class="keyword">this</span>.comboBox1.SelectionStart = <span class="keyword">this</span>.comboBox1.Text.Length;</span><br><span class="line">            <span class="comment">//保持鼠标指针原来状态，有时候鼠标指针会被下拉框覆盖，所以要进行一次设置。</span></span><br><span class="line">            Cursor = Cursors.Default;</span><br><span class="line">            <span class="comment">//自动弹出下拉框</span></span><br><span class="line">            <span class="keyword">this</span>.comboBox1.DroppedDown = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/img/Winform%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ComboBox%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/261053162014804.png" alt="img"></p><p>实现过程中的问题：</p><p>　　1.绑定数据一开始用的DataSource方式，但是写到下面重新给ComboBox设置数据源的时候，报错：不能为已经设置DataSource的combobox赋值。</p><p>　　　　　　解决方式：将赋值方式改为：Item.Add(obj)或者Item.AddRange(obj)方式</p><p>　　2.下拉框的内容一直在增加</p><p>　　　　　　解决方式：当文本框文本改变时，清空下拉框的内容，然后再添加数据。</p><p>　　3.输入文本改变时，没有自动弹出下拉框显示已经查询好的数据。</p><p>　　　　　　解决方式：设置comboBox的DroppedDown 属性为True。</p><p>　　4.ComboBox文本框改变事件一开始选择用的是TextChanged事件，但是当在界面用 上 下键盘选择时，出现bug，不能进行选择。</p><p>　　　　　　解决方式：将文本框改变事件换为TextUpdate事件，然后添加实现方法。</p><p>　　5.当在ComboBox输入内容时，内容文本是倒序输出的，光标位置始终在最前面。</p><p>　　　　　　解决方式：设置光标的显示位置，this.comboBox1.SelectionStart = this.comboBox1.Text.Length;</p><p>　　6.输入内容改变时，用鼠标选择下拉列表项的时候，鼠标指针消失，被下拉框覆盖掉。</p><p>　　　　　　解决方式：设置鼠标状态为一开始的默认状态，Cursor = Cursors.Default;</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> IT技术 </tag>
            
            <tag> WinForm </tag>
            
            <tag> 转载文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-SQL获取方法参数详解</title>
      <link href="/MyBatis-SQL%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
      <url>/MyBatis-SQL%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>在一般的框架中，我们在Mapper接口中定义方法，在对应的XML映射文件中编写SQL语句，并在SQL语句中使用方法参数。</p><p>在SQL语句中，我们有两种方式获取参数：</p><ul><li><code>#&#123;&#125;</code>：使用 <code>#&#123;&#125;</code> 参数语法时，MyBatis 会创建 <code>PreparedStatement</code> 参数占位符，并通过占位符安全地设置参数（就像使用 ? 一样）</li><li><code>$&#123;&#125;</code>：使用 <code>$&#123;&#125;</code> 参数语法时，MyBatis 只是简单地进行字符串替换（就像字符串拼接一样）</li></ul><p>例子：</p><p>使用<code>#&#123;&#125;</code>获取参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where name = #&#123;name&#125; and age &gt; #&#123;age&#125;&quot;)</span></span><br><span class="line">List&lt;UserPO&gt; <span class="title function_">findUserByNameAndAge</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;age&quot;)</span> <span class="type">int</span> age)</span>;</span><br></pre></td></tr></table></figure><p>日志输出如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: select * from user where name = ? and age &gt; ?</span><br><span class="line">==&gt; Parameters: 张三(String), 10(Integer)</span><br><span class="line">&lt;==    Columns: id, name, age, address, phone</span><br><span class="line">&lt;==        Row: 1, 张三, 20, 广州, 13500221345</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">UserPO&#123;id=1, name=&#x27;张三&#x27;, age=20, address=&#x27;广州&#x27;, phone=&#x27;13500221345&#x27;&#125;</span><br></pre></td></tr></table></figure><p>使用<code>$&#123;&#125;</code>获取参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where name = &#x27;$&#123;name&#125;&#x27; and age &gt; $&#123;age&#125;&quot;)</span></span><br><span class="line">List&lt;UserPO&gt; <span class="title function_">findUserByNameAndAge</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;age&quot;)</span> <span class="type">int</span> age)</span>;</span><br></pre></td></tr></table></figure><p>日志输出如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: select * from user where name = &#x27;张三&#x27; and age &gt; 10</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, name, age, address, phone</span><br><span class="line">&lt;==        Row: 1, 张三, 20, 广州, 13500221345</span><br><span class="line">&lt;==      Total: 1</span><br></pre></td></tr></table></figure><p>可以看到，在使用<code>$&#123;&#125;</code>获取参数时，我们需要自行拼接单引号，并且在输出的日志中，SQL语句并没有使用参数占位符。</p><p>有时想直接在 SQL 语句中直接插入一个不转义的字符串。 比如 ORDER BY 子句，这时候就可以使用<code>$&#123;&#125;</code>获取参数了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ORDER BY $&#123;columnName&#125;</span><br></pre></td></tr></table></figure><h2 id="2-参数类型"><a href="#2-参数类型" class="headerlink" title="2. 参数类型"></a>2. 参数类型</h2><h3 id="2-1-单个参数"><a href="#2-1-单个参数" class="headerlink" title="2.1  单个参数"></a>2.1  单个参数</h3><p>方法参数只有一个，并且为基础数据类型（如int、long、String等），如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserPO <span class="title function_">findUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lee.entity.UserPO&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时候，我们可以在<code>#&#123;&#125;</code>的大括号里直接写参数名（如<code>#&#123;id&#125;</code>），SQL语句中能顺利获取到参数。</p><h3 id="2-2-多个参数"><a href="#2-2-多个参数" class="headerlink" title="2.2 多个参数"></a>2.2 多个参数</h3><p>方法参数有多个，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserPO&gt; <span class="title function_">findUserByNameAndAge</span><span class="params">( String name,  <span class="type">int</span> age)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByNameAndAge&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lee.entity.UserPO&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name = #&#123;name&#125; and age &gt; #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们执行，会报如下错误：</p><p style="color:red">Cause: org.apache.ibatis.binding.BindingException: Parameter 'name' not found. Available parameters are [arg1, arg0, param1, param2]</p><p>报错信息提示我们参数<code>name</code>找不到，可以使用的参数名是<code>arg0</code>/<code>param1</code>（对应第一个参数<code>name</code>）和<code>arg1</code>/<code>param2</code>（对应第二个参数<code>age</code>），所以，参照报错信息，我们修改SQL语句如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByNameAndAge&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lee.entity.UserPO&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name = #&#123;arg0&#125; and age &gt; #&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>成功执行！但是，使用MyBatis提供的默认参数名（ <code>arg0</code>或<code>param1</code> ）去获取参数，会使得SQL语句不能达到见名知意的效果，我们可以在方法参数中添加<code>@Param</code>注解的方式，来自定义参数名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserPO&gt; <span class="title function_">findUserByNameAndAge</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;age&quot;)</span> <span class="type">int</span> age)</span>;</span><br></pre></td></tr></table></figure><p>这样，我们在SQL中就能使用<code>#&#123;name&#125;</code>和<code>#&#123;age&#125;</code>的方式来获取参数值了。</p><h3 id="2-3-参数为JavaBean或Map"><a href="#2-3-参数为JavaBean或Map" class="headerlink" title="2.3  参数为JavaBean或Map"></a>2.3  参数为JavaBean或Map</h3><p>方法参数为一个Java Bean对象或Map对象，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserPO <span class="title function_">findUserByUserPO</span><span class="params">(UserPO user)</span>;</span><br><span class="line">List&lt;UserPO&gt; <span class="title function_">findUserByMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByUserPO&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lee.entity.UserPO&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.lee.entity.UserPO&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125; and name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lee.entity.UserPO&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125; and name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以直接使用JavaBean中的字段名或Map中的键来获取对应的参数值。</p><p>如果我们加了<code>@Param</code>注解，那么就需要加上前缀：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserPO <span class="title function_">findUserByUserPO</span><span class="params">(<span class="meta">@Param(&quot;user&quot;)</span> UserPO user)</span>;</span><br><span class="line"></span><br><span class="line">List&lt;UserPO&gt; <span class="title function_">findUserByMap</span><span class="params">(<span class="meta">@Param(&quot;map&quot;)</span> Map&lt;String, Object&gt; map)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByUserPO&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lee.entity.UserPO&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.lee.entity.UserPO&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;user.id&#125; and name = #&#123;user.name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lee.entity.UserPO&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;map.id&#125; and name = #&#123;map.name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时如果直接使用字段名或键去获取参数值，是会报错的。</p><h3 id="2-4-参数为数组"><a href="#2-4-参数为数组" class="headerlink" title="2.4 参数为数组"></a>2.4 参数为数组</h3><p>方法参数为数组，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserPO&gt; <span class="title function_">findUserByIdsArray</span><span class="params">(<span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure><p>通常在SQL中要使用动态SQL来拼接：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByIdsArray&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lee.entity.UserPO&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id in (</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行查询后报错，错误信息如下：</p><p style="color:red">Error querying database.  Cause: org.apache.ibatis.binding.BindingException: Parameter 'ids' not found. Available parameters are [array, arg0]</p><p>报错信息提示我们在 <code>&lt;foreach collection=&quot;ids&quot;&gt;</code>中应该使用<code>array</code>或<code>arg0</code>来获取参数值，而不是<code>ids</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByIdsArray&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lee.entity.UserPO&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id in (</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样地，我们也可以使用<code>@Param</code>来自定义参数名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserPO&gt; <span class="title function_">findUserByIdsArray</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> <span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure><p>这样，我们就可以使用<code>ids</code> 来获取参数了： <code>&lt;foreach collection=&quot;ids&quot;&gt;</code></p><h3 id="2-5-参数为集合"><a href="#2-5-参数为集合" class="headerlink" title="2.5 参数为集合"></a>2.5 参数为集合</h3><p>参数为集合，以List为例，与参数为数组类似，只不过MyBatis提供的默认参数名为：<code>[arg0, collection, list]</code>，我们也可以通过<code>@Param</code>自定义参数值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserPO&gt; <span class="title function_">findUserByIdsList</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> List&lt;Integer&gt; ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByIdsList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lee.entity.UserPO&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id in (</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-小结"><a href="#2-6-小结" class="headerlink" title="2.6 小结"></a>2.6 小结</h3><p>针对不同的参数类型，MyBatis提供了默认的参数名来获取参数值，我们可以通过<code>@Param</code>自定义参数名，以达到见名知意的效果，推荐所有的参数都加上<code>@Param</code>注解。</p><h2 id="3-源码分析"><a href="#3-源码分析" class="headerlink" title="3. 源码分析"></a>3. 源码分析</h2><p>在MyBatis中，获取参数名的源码主要在<code>ParamNameResolver</code>类中，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamNameResolver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GENERIC_NAME_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;param&quot;</span>;</span><br><span class="line">    <span class="comment">// &lt;setting name=&quot;useActualParamName&quot; value=&quot;true&quot;/&gt; </span></span><br><span class="line">    <span class="comment">// 允许使用方法签名中的名称作为语句参数名称。 默认值为true。</span></span><br><span class="line">    <span class="comment">// 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> useActualParamName;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 键是方法参数的索引，值是方法参数名</span></span><br><span class="line">    <span class="comment">// 如果方法参数有@Param注解，则方法参数名为@Param指定的值，否则方法参数名为默认值（useActualParamName=true）或索引值(useActualParamName=false)</span></span><br><span class="line">    <span class="comment">// 注意，如果方法有特殊的参数（例如RowBounds或ResultHandler），则作为方法参数名的索引与实际的参数索引是不一样的</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="comment">// 例如：</span></span><br><span class="line">    <span class="comment">// 1. aMethod(@Param(&quot;M&quot;) int a, @Param(&quot;N&quot;) int b) --names--&gt; &#123;&#123;0，&quot;M&quot;&#125;,&#123;1,&quot;N&quot;&#125;&#125;</span></span><br><span class="line">    <span class="comment">// 2. aMethod(int a, int b) --names--&gt; &#123;&#123;0,&quot;1&quot;&#125;,&#123;1,&quot;1&quot;&#125;&#125;</span></span><br><span class="line">    <span class="comment">// 3. aMethod(int a, RowBounds rb, int b) --names--&gt; &#123;&#123;0,&quot;0&quot;&#125;,&#123;2,&quot;1&quot;&#125;&#125;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SortedMap&lt;Integer, String&gt; names;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> hasParamAnnotation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构造方法</span></span><br><span class="line"><span class="comment">    * config: MyBatis配置文件</span></span><br><span class="line"><span class="comment">    * method: Mapper中要执行的方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ParamNameResolver</span><span class="params">(Configuration config, Method method)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.useActualParamName = config.isUseActualParamName();</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line">        <span class="keyword">final</span> Annotation[][] paramAnnotations = method.getParameterAnnotations();</span><br><span class="line">        <span class="keyword">final</span> SortedMap&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">paramCount</span> <span class="operator">=</span> paramAnnotations.length;</span><br><span class="line">        <span class="comment">// 获取方法参数名</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">paramIndex</span> <span class="operator">=</span> <span class="number">0</span>; paramIndex &lt; paramCount; paramIndex++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSpecialParameter(paramTypes[paramIndex])) &#123;</span><br><span class="line">                <span class="comment">// 跳过特殊参数类型</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果有@Param，获取Param的值作为参数名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (Annotation annotation : paramAnnotations[paramIndex]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Param) &#123;</span><br><span class="line">                    hasParamAnnotation = <span class="literal">true</span>;</span><br><span class="line">                    name = ((Param) annotation).value();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 没有@Param，获取默认的参数名</span></span><br><span class="line">            <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (useActualParamName) &#123;</span><br><span class="line">                    name = getActualParamName(method, paramIndex);  <span class="comment">// arg0, arg1</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">                    name = String.valueOf(map.size());   <span class="comment">// 0, 1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(paramIndex, name);</span><br><span class="line">        &#125;</span><br><span class="line">        names = Collections.unmodifiableSortedMap(map);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过反射获取参数名</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getActualParamName</span><span class="params">(Method method, <span class="type">int</span> paramIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ParamNameUtil.getParamNames(method).get(paramIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否为特殊类型 RowBounds或ResultHandler</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSpecialParameter</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RowBounds.class.isAssignableFrom(clazz) || ResultHandler.class.isAssignableFrom(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回参数名数组</span></span><br><span class="line">    <span class="keyword">public</span> String[] getNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> names.values().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取命名的参数值</span></span><br><span class="line"><span class="comment">     * 三种情况：</span></span><br><span class="line"><span class="comment">     1. 如果没有参数，则返回null</span></span><br><span class="line"><span class="comment">     2. 如果有一个参数，并且该参数没有<span class="doctag">@Param</span>注解，则：</span></span><br><span class="line"><span class="comment">     2.1 如果该参数为集合类型或数组类型，则返回 &#123;&quot;array&quot;, 参数值&#125; / &#123;&#123;&quot;collection&quot;,参数值&#125;,&#123;&quot;list&quot;,&quot;参数值&quot;&#125;&#125;</span></span><br><span class="line"><span class="comment">     2.2 如果该参数为其他类型（如JavaBean,Map,String等），则直接返回参数值</span></span><br><span class="line"><span class="comment">     3. 其他情况（多个参数/一个参数并且有<span class="doctag">@Param</span>注解）,通过names哈希表返回命名的参数值，除此之外，还会返回默认的param1类型的命名参数，例如：</span></span><br><span class="line"><span class="comment">     定义：aMathod(<span class="doctag">@Param</span>(&quot;a&quot;) int a, <span class="doctag">@Param</span>(&quot;b&quot;) int b) </span></span><br><span class="line"><span class="comment">     调用：aMathod(1,2);</span></span><br><span class="line"><span class="comment">     getNamedParams返回：&#123;&#123;&quot;a&quot;,1&#125;,&#123;&quot;b&quot;,2&#125;,&#123;&quot;param1&quot;,1&#125;,&#123;&quot;param2&quot;,2&#125;&#125;</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     定义：aMathod(String x, int b)</span></span><br><span class="line"><span class="comment">     调用：aMethod(&quot;test&quot;, 999);</span></span><br><span class="line"><span class="comment">     getNamedParams返回：</span></span><br><span class="line"><span class="comment">     &#123;&#123;&quot;arg0&quot;,&quot;test&quot;&#125;,&#123;&quot;arg1&quot;,999&#125;,&#123;&quot;param1&quot;,&quot;test&quot;&#125;,&#123;&quot;param2&quot;,999&#125;&#125; （useActualParamName=true） 或</span></span><br><span class="line"><span class="comment">     &#123;&#123;&quot;0&quot;,&quot;test&quot;&#125;,&#123;&quot;1&quot;,999&#125;,&#123;&quot;param1&quot;,&quot;test&quot;&#125;,&#123;&quot;param2&quot;,999&#125;&#125; (useActualParamName=false)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getNamedParams</span><span class="params">(Object[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">paramCount</span> <span class="operator">=</span> names.size();</span><br><span class="line">        <span class="keyword">if</span> (args == <span class="literal">null</span> || paramCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasParamAnnotation &amp;&amp; paramCount == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> args[names.firstKey()];</span><br><span class="line">            <span class="keyword">return</span> wrapToMapIfCollection(value, useActualParamName ? names.get(names.firstKey()) : <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Map&lt;String, Object&gt; param = <span class="keyword">new</span> <span class="title class_">ParamMap</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : names.entrySet()) &#123;</span><br><span class="line">                param.put(entry.getValue(), args[entry.getKey()]);</span><br><span class="line">                <span class="comment">// add generic param names (param1, param2, ...)</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">String</span> <span class="variable">genericParamName</span> <span class="operator">=</span> GENERIC_NAME_PREFIX + (i + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// ensure not to overwrite parameter named with @Param</span></span><br><span class="line">                <span class="keyword">if</span> (!names.containsValue(genericParamName)) &#123;</span><br><span class="line">                    param.put(genericParamName, args[entry.getKey()]);</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> param;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      1. 如果参数为集合或数组，则将参数包装为命名参数</span></span><br><span class="line"><span class="comment">      2. 否则，直接返回参数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">wrapToMapIfCollection</span><span class="params">(Object object, String actualParamName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Collection) &#123;</span><br><span class="line">            ParamMap&lt;Object&gt; map = <span class="keyword">new</span> <span class="title class_">ParamMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;collection&quot;</span>, object);</span><br><span class="line">            <span class="keyword">if</span> (object <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">                map.put(<span class="string">&quot;list&quot;</span>, object);</span><br><span class="line">            &#125;</span><br><span class="line">            Optional.ofNullable(actualParamName).ifPresent(name -&gt; map.put(name, object));</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object != <span class="literal">null</span> &amp;&amp; object.getClass().isArray()) &#123;</span><br><span class="line">            ParamMap&lt;Object&gt; map = <span class="keyword">new</span> <span class="title class_">ParamMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;array&quot;</span>, object);</span><br><span class="line">            Optional.ofNullable(actualParamName).ifPresent(name -&gt; map.put(name, object));</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在MyBatis配置文件中，存在如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useActualParamName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure><p>该配置的作用是允许使用方法签名中的名称作为语句参数名称。 默认值为true。为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）。<code>-parameters</code>选项作用如下：</p><blockquote><p>-parameters</p><p>Generates metadata for reflection on method parameters. Stores formal parameter names of constructors and methods in the generated class file so that the method <code>java.lang.reflect.Executable.getParameters</code> from the Reflection API can retrieve them.</p><p>将方法(包括构造方法)的参数名保存到生成的class文件中，之后可以通过反射获取到参数名。</p></blockquote><p>在IDEA中设置编译器参数如下：</p><p><img src="/img/MyBatis%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/image-20230207173509759.png" alt="image-20230207173509759"></p><p>之后，生成的class文件中的参数名就是我们写的实际参数名了，而不是<code>arg0</code>，所以在MyBatis中，可以不加<code>@Param</code>注解直接使用我们写的参数名，并不会报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserPO&gt; <span class="title function_">findUserByNameAndAge</span><span class="params">( String name,  <span class="type">int</span> age)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByNameAndAge&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lee.entity.UserPO&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name = #&#123;name&#125; and age &gt; #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过并不建议这样使用！（后面IDEA失效了，加了<code>-parameters</code>选项也没法用了。。。）</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] MyBatis参数：<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#Parameters">https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#Parameters</a></p><p>[2] javac编译参数：<a href="https://download.java.net/java/early_access/panama/docs/specs/man/javac.html#options">https://download.java.net/java/early_access/panama/docs/specs/man/javac.html#options</a></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT技术 </tag>
            
            <tag> Java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo建站教程</title>
      <link href="/%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B/"/>
      <url>/%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1. 安装Hexo"></a>1. 安装Hexo</h2><p>安装前提：</p><ul><li>安装<a href="https://nodejs.org/en/">Node.js</a>(Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li>安装<a href="https://git-scm.com/">Git</a></li></ul><p><img src="/img/image-20230130102237783.png" alt="image-20230130102237783"></p><p>之后我们就可以安装Hexo了，使用如下命令进行全局安装：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="/img/image-20230130102612020.png" alt="image-20230130102612020"></p><p>安装结果如上，npm提示我们应该使用如下命令：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --location=global hexo-cli</span><br></pre></td></tr></table></figure><p>安装成功后，我们可以使用如下两种方式来使用hexo：</p><ul><li><p><code>npx hexo &lt;command&gt;</code></p><p>查看hexo的版本：</p><p><img src="/img/image-20230130103424474.png" alt="image-20230130103424474"></p></li><li><p>将npm全局包所在目录路径添加到环境变量后直接使用 <code>hexo &lt;command&gt;</code> </p><p>首先需要知道npm全局安装的包(Hexo)在什么目录，我们可以通过如下命令获取：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm root --location=global</span><br></pre></td></tr></table></figure><p><img src="/img/image-20230130105658587.png" alt="image-20230130105658587"></p><p>然后回到上一级目录：<code>C:\Users\xxx\AppData\Roaming\npm\</code>，可以看到Hexo的命令行是存在该级目录的，所以将该目录路径添加到环境变量中</p><p><img src="/img/image-20230130105609246.png" alt="image-20230130105609246"></p><p>然后就可以直接使用<code>hexo &lt;command&gt;</code>了：</p><p><img src="/img/image-20230130105947665.png" alt="image-20230130105947665"></p></li></ul><h2 id="2-建站"><a href="#2-建站" class="headerlink" title="2. 建站"></a>2. 建站</h2><p>安装 Hexo 完成后，我们可以执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><ul><li>_config.yml：网站配置文件</li><li>package.json：应用数据</li><li>scaffolds：文章模板，当创建新文章时，Hexo会在scafflods目录中寻找对应的模板</li><li>source：网站资源目录，存放网站内容（文章、图片等）。Hexo会忽略隐藏文件或者以下划线(<code>_</code>)开头的文件和文件夹（除了<code>_posts</code>文件夹）。可渲染的文件（例如：Markdown、HTML）会被处理并放进<code>public</code>文件夹，其他文件就只是简单地复制进<code>public</code>文件夹。</li><li>themes：主题文件夹</li></ul><h2 id="3-选择主题-oranges"><a href="#3-选择主题-oranges" class="headerlink" title="3. 选择主题-oranges"></a>3. 选择主题-oranges</h2><p>此处选择的是oranges主题：<a href="https://github.com/zchengsite/hexo-theme-oranges">https://github.com/zchengsite/hexo-theme-oranges</a></p><p>下载并解压该主题到thems目录下，然后将<code>_config.yml</code>文件中的主题配置修改如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: oranges</span><br></pre></td></tr></table></figure><p>按照主题介绍的配置步骤进行个性化配置，结果如下：</p><p><img src="/img/image-20230201100926852.png" alt="image-20230201100926852"></p><h2 id="4-部署到Github-Pages"><a href="#4-部署到Github-Pages" class="headerlink" title="4. 部署到Github Pages"></a>4. 部署到Github Pages</h2><p>使用一键部署快速部署到Github Pages：</p><ul><li><p>在Github中创建仓库<code>&lt;username&gt;.github.io</code></p></li><li><p>初始化本地仓库，并关联到远程仓库，<code>.gitignore</code>信息如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">_multiconfig.yml</span><br></pre></td></tr></table></figure></li><li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>在 <code>_config.yml</code> 中添加以下配置（如果有的话，删除现有行）:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="line">  # example, https://github.com/hexojs/hexojs.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>执行如下命令进行部署：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></li><li><p>在Github仓库中设置Pages相关配置：</p><p><img src="/img/image-20230201105516163.png" alt="image-20230201105516163"></p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] Hexo官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p>[2] npm全局包的安装位置：<a href="https://blog.csdn.net/nju_zjy/article/details/122696587">https://blog.csdn.net/nju_zjy/article/details/122696587</a></p><p>[3] oranges主题：<a href="https://github.com/zchengsite/hexo-theme-oranges">https://github.com/zchengsite/hexo-theme-oranges</a></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT技术 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 网站建设 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
